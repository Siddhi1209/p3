B@NCS-24




















Banc Automation and Network Control System






(Multi-Application Setup 
System Overview)











Architecture of B@NCS-24












 Sutlej Sutlej 











Features of Multi-Apps:

    • Multiple Applications architecture consists of multiple B@NCS applications, connecting to a single back-end database. Branch Servers send transactions to any of the applications based on some pre-defined criterion.

    • The Master Server (Sutlej) acts as the controlling server, for the other server. Common activities, involving initialization of database tables will be run from the Master server.

    • The online transactions will be processed by both applications, B@ncslink will manage the routing of these transactions to the Master or the Slave applications.

    • B@ncslink will use the Branch code to determine the application to which the transaction is to be routed.

    • The database will be setup with RAC (Real Application Clusters). This will provide the application with two instances of the same database. 

Real Application Clusters (RAC):

    • The two instances of the databases (i012band and i013bans) are depicted by Jhelum (i112racd and i113racs) and Jamuna (i212racd and i213racs).

    • RAC is designed to increase the performance, utilizing the resources of multiple nodes.

    • In the RAC configuration, all the instances can access the single shared database, which is built on shared disks.

    • RAC can manage data integrity and consistency (using Global Enqueue Service Daemon).

    • RAC has the built-in technology of multiple buffer cache management (Global Cache Service Daemon), which will enable to fetch the data from the other available cache instead of fetching from the disk, thereby reducing the Disk I/O.

    • High Speed IPC Interconnect is a high bandwidth facility to connect the nodes for inter-node communication.


System Layers:

    • Presentation Layer: 
        ◦ B@NCS-LINK (Admin and Branch front-end) , .NET B@NCS-CONNECT (Customer and Internet) Java
        ◦ GUI driven by HTML and XML

    • Delivery Layer:
        ◦ Interface between Front-end and Operating System
        ◦ C, C++, COBOL

    • Application Layer:
        ◦ Driven by system-triggers, parameters and environment settings.
        ◦ C, C++, COBOL

    • Database Layer:
        ◦ Interfaces to database using appropriate call levels and language







The architecture for a single application can be depicted as follows:





























Gateway Program:

Sending the message:

    • Initialize the input message queues into the system with start-up
    • Call the context block for the region to determine whether the system is running in day or night mode for processing  (via UT0008 in 24hr-mode)
    • Call for the nomination of the application queue for the transaction (via UT9005)
    • Format the delivery and internal headers of the transaction message
    • Send the transaction to the application queue and the LINKIN program (LINKIN programs communicate with the Gateways through IPC, Inter process communication)

Receiving message from the host:

    • Receives the messages from the application queue via LINKOUT program
    • Formats output message to the BANCS-LINK interface format
    • Returns the message to the transaction source



UT0008:

    • Called by the Transaction Interface program to access 24hr region information, including operational parameters (environment variables); Shared memory sections (for parameters and processing information); and Context block for the system (region and system details, like region mode, master DB in use, etc.)
    • Retrieves the context block, to make the LINKIN program aware, whether the system is working in the day region or the night.
    • It also provides various other environment variables




UT9005:

    • Call shared memory for the application parameters (APPPARAMS)
    • From the application parameter, help the LINKIN program to put the transaction in the correct queue



UT9003:

    • Manages internal queue access
    • Performs the following functions:
        ◦ Enable input
        ◦ Send information
        ◦ Receive information
        ◦ Disable input

LINKIN: 

(Input Communications Module)

    • Sending the message headers into the working storage (via UT9007, storing the Delivery and Internal header)
    • Formats the internal message (sets STRTAREA values)
    • Adds the transaction journal number (via UT9006, providing a sequential number for reference)
    • Sends transaction to SYSSTART (passing STRTAREA and DATA)
    • After processing, also performs the transaction commit to the database, if no rollback has occurred








SYSSTART:

(Communication Distributor)

    • Initialization of the online Language and Text definitions (UT9000 read of LNGM and TXTM)
    • Sending of the transaction to ED0000 for processing
    • Inserting the transaction into the Link Image Table (IMG0) of the system by calling SY0020
    • Allows potential reposting of all online transactions fired in the Night Transactions


ED0000:

(Editor Mainline)

    • Retrieving the System Application and Group Application Parameters (APPPARAM and GAPPARAM)
    • Initialization of Application Mainline programs (XX0000)
    • Calls the security and validation program
    • Performs internal transaction distribution (e.g.: 9570/1/2: cheque clearing, 9022: check digit processing)
    • Transactions that are deemed as valid are passed to application Mainlines for program (XX0000)
    • After transaction processing, checks transaction rollback to the database (100-899 and >999 lead to database rollback)
    • Sends failed output messages to Formatter (FT0000)










ED0010:

(Editor Security)

    • Authorizes Teller signon/signoff (updating the teller master TELM for signon attempts, active tellers, language and correspondence details)
    • Validates passwords via ED0011
    • Validates the capability of the teller (against System application, Group application and Teller parameters)
    • Directs Internal transactions for separate processing (e.g. System transactions in the range of 9000 to 9999)
    • In night mode, checks if the transaction is allowed for posting (ED1PARAM Night enable flag)


ED0011:

    • Encrypts and Unpacks Teller passwords
    • Prevents a disk dump of system passwords from the database


FT0000:

(Online Transaction Message Formatter)

    • Examines the status of the transaction: Error message numbers 000-099 and 900-999 are valid transactions, while 100-899 and 1000 and above are invalid transactions
    • Attaches the relevant message text for output (via UT0260 read of TXTM)
    • Sends the message to LINKOUT






LINKOUT:

(Output Communication Module)

    • Retrieves the message header from the working storage (call to UT9007)
    • Reformats the message for the gateway
    • Sends the transaction to the gateway queue (via UT9003)


SY0010: 

(Journal Table IO Module)

    • Write successful transactions into the Journal Tables (JR01 through JR16)
    • Called by Mainline programs after successful completion of transaction processing
    • The Journal is a vital part of Secondary (auxiliary) processing


SY0020:

(Link Image Table IO Module)

    • The Link Image Table is a reference of all transactions received for processing
    • Called by SYSSTART with transaction processing
    • Writes all transactions into the Link Image Table (IMG0)






An Example Situation:
































Explanation:

    • The gateway program handles message input from the B@NCS LINK front end

        ◦ Retrieve the environment and system variables

        ◦ Obtain the context block by a call to UT0008

        ◦ Obtain the application queue definitions by a call to UT9005

        ◦ UT9005 will return the application queue depending on the transaction number range in APPPARAM

        ◦ B24GWBL will then set up the input message data for formatting

        ◦ Send to the application using QUEIO

    • The message is then passed onto the Application queue for processing

        ◦ LINKIN is the first program in the Application Wrapper layer of processing

        ◦ Receives the message of the Queue via UT9003

        ◦ Places the message Delivery and Internal Header in Working Storage by UT9007

        ◦ The message is formatted to move data into STRT-AREA

        ◦ The sequential Journal number is attached to the message by UT9006

    • The transaction is then passed on to SYSSTART for further processing

        ◦ SYSSTART prepares the online language and text before passing the message on for validation

        ◦ Initializes UT9000 to load TXTM values for application processing

        ◦ Sends the transaction to ED0000 Mainline for validation

    • The Editor mainline program controls the transaction validation

        ◦ Loads the Systems application and Group Application parameters on initialization

        ◦ Initializes the mainline program of the application

        ◦ There is then a call to ED0010 for transaction validation

        ◦ ED0010 directs internal transactions for processing

        ◦ A transaction such as Teller Signon would also validate the password by a call to ED0011

        ◦ It also checks whether the transaction can be posted in the current region mode

        ◦ The system next validates the transaction against the Group and Teller capabilities

        ◦ Now the transaction is authorized, the program determines what mainline program should be called based on the APPPARAM values and the message trancode

        ◦ Processing continues for checking digit validation and then the application mainline is verified to be active before the transaction is sent

        ◦ The message is then sent to the mainline program

        ◦ The mainline sends the output and status to the Formatter, after the transaction has been correctly processed by intermediate programs

    • Formatter checks the status of the message for output

        ◦ Checks the status of the Error message output

        ◦ Individual error numbers are validated

        ◦ The text description is returned, the OK message is standard, other messages call UT0260 for the TXTM description of the error based on the Error number

        ◦ The message text and output is passed onto LINKOUT

    • The message and status is now reformatted for delivery to the Gateway

        ◦ Retrieve the Delivery and Internal headers by calling UT9007, and reattach them to the message

        ◦ After formatting the message is passed onto the Delivery queue for output

        ◦ The Gateway retrieves the message off the application queue

    • After the message is returned, control passes back to the Mainline program

        ◦ At this stage, some general validation are be performed (such as writing financial transactions to the Journal by SY0010, updating Institution Totals by UT0019, etc.)

        ◦ After processing, ED0000 checks if a database rollback should occur, set by a DBIO call code 26, when an error message is encountered

    • The program will then return control to SYSSTART

        ◦ SY0020 is called to update the Link Image table (IMG0), with a record of the transaction

        ◦ Every transaction is written to IMG0, irrespective of the fact, that whether it was successful or not

    • After posting to the Link table, control passes onto LINKIN

        ◦ LINKIN is the final area of transaction processing

        ◦ Processing returns after the SYSSTART call

        ◦ Call code 25 is used to commit the data (this will only occur if a rollback was not performed in ED0000)

ONLINE JOBS:

SY0080: (Common Console Interaction Program)

    • Brings up the Message Console for the System, which the latter will use to display/show messages

    • This is started as the first job, while bringing up the region

    • Only one instance of this job should be running in a B@NCS-24 System


SY0007: (Region/System Context Block Loader)

    • SY0007 loads the Context block for the region

    • The context block denotes the actual health of the system, as it indicates whether the region is DAY/NIGHT mode, system number, database in use, etc.

    • This program will read the SYSC (System context block) table and load the values into the shared memory.

    • This is fired as the second job in the startup sequence

SY0004: (Central Parameter Manager/Loader)

    • SY0004 loads the parameter tables of the PAGE type into the shared memory

    • This job is executed after the initialization of SY0007

    • This job enables the faster access of parameters to B@NCS Application System

    • SY0004 creates an empty shared memory at initialization

SY0006: (Region/System Context Block Creation)

    • SY0006 creates the System context block during startup

    • It will truncate the SYSC table and load fresh records into them

    • The context block flags are initialized after this job is executed, followed by bouncing of the region































DATABASE AND ACCESS METHODS:

Types of Tables:

        ◦ Standalone Master: 

            ▪ Tables that neither reference nor are referenced by any other table

            ▪ No links between a standalone master table and any other table in the system

            ▪ Simplest tables in the system

            ▪ Each table records a key and details

            ▪ Example: TXTM

        ◦ Normal Master/Variable Tables:

            ▪ Master table is associated with only a single variable table

            ▪ Master table records the key and details

            ▪ Variable table holds further information about each record in Master

            ▪ Variable table Primary key comprises the attributes of the Master Primary key with the addition of a record number

            ▪ Example: UNCM (uncleared master) / UNCV (uncleared variable)

        ◦ Coded-Record Master/Variable Tables:

            ▪ Master table is associated with multiple variable tables

            ▪ Each variable table is unique and stores different information relating to Master table

            ▪ Master and many variable tables are linked logically

            ▪ Coded-Record Master/Variable tables are used, when there is a variety of information that cannot be stored in one Master/Variable table

            ▪ Example: CUSM (customer master), CUSVAA (customer name and address), CUSVBB (account number and address)

        ◦ Special Master/Variable Tables:

            ▪ Special Master stores financial details

            ▪ Variable table store transaction information and create new variable records

            ▪ Record number for variable is created by DBIO, in descending sequence

            ▪ Example: INVM (deposits master), INCT (deposits transactions)



        ◦ Special Master – Associated Master Tables:

            ▪ Associated Master tables are used to store functionality specific data for special master tables

            ▪ References to the Special master table through primary key

            ▪ Example: INVM (deposits master), INCC (CC/OD accounts master), INGM (government accounts master), primary key = KEY_1




















DBIO Access Diagram:


















    • DBIO: 

        ◦ COBOL program for standardized access logic

        ◦ Interface to Database Management System (DBMS)

        ◦ Handles all calls from application programs (online or batch) to store and retrieve information from the database


    • DBIO (Database I/O Distributor):

        ◦ Calls required IOXXXX (“XXXX” represents the table name) program depending upon the call code and table name passed from the application program (through DBIO)

        ◦ Calls IOMISC to perform various Database Management Activities

    • DBIOMISC (Miscellaneous Database Activity Module): 

Called via DBIO and DBIODIST to perform database management. It provides support for:

        ◦ OPEN (Connect to the database)

        ◦ CLOSE (Disconnect from the database)

        ◦ COMMIT (Commit the unit of work)

        ◦ ROLLBACK (Rollback the unit of work)

    • IOXXXX (Database Table I/O Program):

        ◦ Automatically generated PROCOBOL programs which does the actual Database Interaction

        ◦ Contains queries for SELECT / INSERT / UPDATE / DELETE operations on the database table on the basis of Primary / Alternate Key

        ◦ Passes requested data to application program through the DBIO

    • DBIOMOD (New Database Access Method):

        ◦ New Database Access method, where Application programs directly call the required PROCOBOL program (DBIOXXXX)



















Transaction Processing:



    • Primary Update Method



    • Secondary Update Method



    • Batch Processing is mainly used for daily interest calculation, updation and statistical reporting
















Primary Update Method:


    • Online Processing


    • Majority of transactions are processed online


    • Examples include:

        ◦ Account and customer creation
        ◦ Financial transactions
        ◦ Enquiries
        ◦ Maintenance


















Online Processing:

    • Updating the Application Database

    • Writing Transactions to the Host Journal

    • Sending responses back to the originating transaction source

    • Other mechanisms for online processing are:

        ◦ Trickle Feed

        ◦ Day Journal




Trickle Feed:

    • Used for external transaction record posting

        ◦ Salary files, Pension files, etc.

    • Can be received on different media such as:

        ◦ Electronically

        ◦ Tapes and Disk files

    • Processed with online, does not take long to process




Day Journal Processing:

    • Used for Internal transaction record posting:

        ◦ Standing orders

        ◦ Term maturities

    • Information created by:

        ◦ Batch interest updating programs

        ◦ Standing orders programs

    • Also processed with online

DAY
PROCESS
MASTER


Extract Program



DAY JOURNAL




Restart Processing




Secondary Update:

    • B@NC-24 has the option of updating non-critical areas behind Online processing or before the batch cycle

    • This leads to a shorter batch run and prioritises Online postings

    • Program name is SY1000

    • Posts all journal transactions

    • Prepares files for batch processing

    • Terminates when reads final record (999999)

    • Cannot start batch until complete

















ATM-INTERFACE




Transaction message 						Response from
sent to Tandem switch						Tandem switch




Tandem validates the card						Tandem receives the 
and generates a BASE24 						response from
transaction message and 						B@NCS-24
sends it to the ATM
Interface



















Transaction									Transaction
Request									Response


Modules/Programs Useful in ATM-Interface:

    • EI0000.COB (Inward message queue)

    • EI0060.COB (Outward message queue)

    • IF1101.COB (ISO to B@NCS-24 Converter)

    • IF1102.COB (B@NCS-24 to ISO Converter)

    • Atm007.c (Port listener and sender)

    • Catjobs corresponding to the COBOL jobs are info1101 (to start ATM gateway) and info1102 (to stop ATM gateway)

    • Tables used by ATM:
        ◦ EFTM (logs all financial transactions)
        ◦ ERTM (logs all reversal transactions)
        ◦ ASUS (All suspense postings will be updated here)

    • $sysout/EI0000.1.out (logs incoming messages)

    • $sysout/EI0060.1.out (logs all outgoing messages and responses)

    • atm_monitor (monitors the ATM log files, if not changed for more than 5 minutes, ATM will be shut down and restarted)

    • atm_kmonitor (kills the ATM monitoring job)





ATM PBF:

    • The PBF file is used by the ATM Switch Center, when the system is offline

    • Infd1111: This daily job is run manually in the day region everyday

    • It calls the programs IF1111.PCO, IF1112.PCO, to extract all the ATM accounts and their balances from the INVM table

    • IF1111.PCO: This program fetches the records from INVM table which has ATM Access Flag as 1 and writes them into a flat file

    • IF1112.PCO: This program reads the flat file created by IF1111.PCO and eliminates the invalid account types and converts the file to PBF format file

    • Infd1109: This job will run after infd1111 job gets over, and will FTP the PBF extracts to ATM switch center













Internet Banking Interface:





						Stream socket program that
						accepts requests and forks to
						to handle new connections



   Host request			          Response to host
(max length 450 bytes)





















Modules/Programs used by INB Interface:

    • IBTCPSV.COB (Listener program)

    • IF2210.COB (Satyam to B@NCS Conv.)

    • IF2215.COB (B@NCS to Satyam Conv.)

    • ibtcpio.c (Port listener and sender)

    • Tables Accessed by INB:

        ◦ INBS (logs all financial transactions)
        ◦ INBM (logs all manual intervention transaction)
        ◦ INBA (logs INB access request from ATM)

    • INFo2250 (to bring up the INB listener)

    • ibs (to bring down the INB listener)















Daily Cycle:

































Daily Cycle (Explanation):

    1. Online Transactions: When the online transactions are issued during the day time, by the various branches, the transactions hit the Day Database, and also refer to the Day Database, for data.

    2. Call for Backup: In the evening the syncing of the Day database and Reference database is started. In this procedure, the two databases are brought to pair.

    3. Region Switch: This takes place usually at 21:30 hrs. After the Region Switch, the transactions start hitting the Night Database, i.e. updates are made here. However, the data is referred from the Day database, only.

    4. Pre-EOD Backup: After the Day and Reference databases are in pair, the syncing is over. However, the 2 databases need to be split, so that updations made to one database are not reflected in the other. After splitting, the Pre-EOD backup is said to have completed. And the EOD procedure can be proceeded with.

    5. DB Switch: But before starting the EOD, the database to be referred is switched, so that any table being updated during EOD is not referred to by any transaction from outside. So after DB switch, the DB being referred to is Reference DB, the transactions are hitting the Night DB. And the Day DB is ready for EOD updation jobs.

    6. EOD: During EOD, the major database updations are performed by IN0800 (INVM table) and BR0501 (BORM table). So after, these jobs are over, we can again switch the DB, which is being referred.

    7. DB Switch: After BR0501 is over, the DB is switched, so that now, the DB being referred is again the Day DB and the DB being updated is the Night DB.

    8. Post-EOD Backup: After the DB switch is done, Post-EOD backup is started. Again the Day and Reference DBs are brought to pair, so that they contain the same data. 

    9. SOD: By the time, Post-EOD backup is in progress, the EOD is over. After the Day and Reference DBs are in pair, again they need to be split. After the splitting is over, the Post-EOD backup is said to have completed, and Migration followed by SOD can be proceeded with.

Region Bounce and Region Switch: After the SOD is over, the region is bounced to bring the queues in the Day region up, so that they are capable of accepting and processing transactions, as the region is switched. The night transactions are reposted from the Night DB to the Day DB, as soon as the region is switched back, so that now, the transactions are hitting the Day DB (i.e. updating the Day DB) and also referring the same for data.













RR0000 Mainline Jobs:


    1. Reposting Night Transactions: 














					   ……………



							……….


							………….



    • In the Night, when the transactions are hitting the Night Database, SY0020.COB will write records in the Link image Tables IM0X (X=1,2,3,4…). SY0020.COB provides this facility by putting transactions in the multiple image tables in Round-Robin order. 

    • When the Region Switch is done after SOD, bncons will send the message to console for reposting, and SY0080.COB on receiving this message, will submit runREPOSTreplica catjob. 

    • “runREPOSTreplica” will read the BNCONS.card file and get the number of replicas to be run and sets the corresponding environment variables. 

    • RR0000.COB replicas on receiving table-names to be processed, will call their respective PCO’s (DBIMXX.PCO) to access the corresponding image table from the Night Region, using the TMP_3_XXXX database link.














    2. Sweeps and Standing Insttructions:

    • At SOD: During SOD, cfpd3004 runs, which calls daydwscr. This catjob triggers the Cobjob DJWSCR.COB. This Cobjob is used to write 2 catjobs:
        ◦ $spool/truncreplica: truncates the DA0X tables (X=1,2,3,4….)
        ◦ $data/temp/updreplica: used by cfpddbda























    • At Post SOD: SORD table has entries for all those accounts, which have standing instructions or sweeps on them. 
        ◦ During post-SOD, dayd0210 loads the SORD table entries of SI’s and sweeps, which are meant to be executed for the day’s date, into the DPTM table. 
        ◦ “dayd0110” uses DJ0110.COB to write into DA0X tables. DPTM table is read and a flat file $data/file/EXTDPTM is created. 
        ◦ This file is then sorted based on the from_acct_no field of DPTM and DAYJ key, and $data/file/EXSDPTM is written. 
        ◦ The number of replicas required divides the Total number of records in sorted file and those many records are written into each DA0X table. 
        ◦ All records in DA0X and DPTM tables have individual status as ‘2’ (yet to be processed).













							……………



    • After Post SOD: Next we commence the 710 RUN SOD-DAY JOURNAL PROCESSING. This will trigger new catjob “runRRreplica”. BNCONS also provides the number of replicas to be run through the file BNCONS.card. After the completion of this job, the header of the tables will have status ‘4’, which will imply completion of 710 and the individual records will have either of the following status:
        ◦ ‘4’ => executed successfully
        ◦ ‘7’ => failed at SOD
        ◦ ‘2’ => yet to be processed (these records are skipped by RR0000 during SOD, because it encounters SOD_EOD_FLAG as E, which are SWEEP transactions and are to be processed at EOD only)

    • Before EOD: Before running EOD, 711 RUN EOD-DAY JOURNAL PROCESSEING is run through BNCONS. It will work like the option 710 of bncons. After the completion of 711, the header of the tables will have status ‘5’, which will imply completion of 711- and the individual records will have any one of the options
        ◦ ‘5’ => executed successfully
        ◦ ‘7’ => failed at EOD
        ◦ ‘4’ => records successfully executed at EOD











    • During EOD: “dayd0120” gets executed as part of the bancs.eod script. 
        ◦ It will first submit the catjob $data/temp/updreplica, which will call cfpddbda.
        ◦ This catjob çfpddbda will table the argument count from ‘updreplica’ and then triggers respective DBDA0X.PCO
        ◦ DBDA0X.PCO updates the status of all the records from DA0X tables to DPTM and also writes new records for failed transactions, which are to be chased, and all the successfully executed records will be deleted from DPTM.
        ◦ Header status will be ‘6’ after dayd0120.
        ◦ After this updation, DJ0120.COB will read DPTM table and produce extract files $spool/DPTMSUCCESSFUL, $spool/DPTMFAIL for the SI Failed, successful and Sweeps reports.







			………



			   ……………

