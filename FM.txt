
#include<stdio.h>
#include<stdlib.h>
#include<sys/ipc.h>
#include<sys/msg.h>
#include<string.h>
#include<time.h>
#include<sys/time.h>   /* for microsecond timestamp */

#define Q_OFFSET                500
#define NUM_REGIONS             128
#define NUM_SYSTEMS             10
#define NUM_APPS                10
#define NUM_QUEUES              250
#define MAX_QUEUE_KEY           (Q_OFFSET+NUM_REGIONS*NUM_SYSTEMS*NUM_APPS*NUM_QUEUES)

char *queueTable[] =
{
        "BANCSQ",
        "LINKINQ",
        "LINKOUTQ",
        "SYSSTARTQ",
        "DJ0000Q",
        "SY0020Q",
        "SY0040Q",
        "SY0050Q",
        "SY0070Q",
        "CDRUTHERQ",
        "CDRDELAYQ",
        "CDTRACERQ",
        "SCCQ",
        "SCCOPINQ",

        /* A Interface queues */
        "AT0000Q",
        "AT0100Q",
        "AT0110Q",
        "AT0200Q",
        "AT0300Q",
        "AT0210Q",
        "EI0000Q",
        "EI0060Q",
        "ATINQ",
        "ATOUTQ",
        "ATRDELAYQ",
        "ATRUTHERQ",
        "ATTRACERQ",
        "ACSQ",
        "ACTLQ",
        "INPUTQ",
        "TRICKLEQ",
        "INTERAPQ",
        "OPQ",
        "CONSOLEQ",
        "SY0004Q",
        "DEPQ",
        "LONQ",
        "TXPQ",
        "CIFQ",
        "GENQ",
        "CASQ",
        "PFMQ",
        "VPIQ",
        "SDVQ",
        "VISQ",
        "WBSQ",
        "CTAQ",
        "SBRQ",
        "ELMQ",
        "LIMQ",
        "EXPQ",
        "FN1Q",
        "FXCQ",
        "TDRQ",
        "SECQ",
        "EPSQ",
        "SPYQ",
        "OLRQ",
        "ONLQ",
        "RESPQ",
        "SB0100Q",
        "DP1Q",
        "DP2Q",
        "DP3Q",
        "DP4Q",
        "DP5Q",
        "DP6Q",
        "DP7Q",
        "DP8Q",
        "DP9Q",
        "VV1Q",
        "VV2Q",
        "VV3Q",
        "ARCQ",
        "CC1Q",
        "KCCQ",
        "LN1Q",
        "PF1Q",
        "GL1Q",
        "EQ1Q",
        "FA1Q",
        "NW1Q",
        "NW2Q",
        "NW3Q",
        "SFDQ",
        "GLAQ",
        "CRCQ",
        "BLTQ",
        "VV3Q",
        "BL1Q",
        "DEPOPINQ",
        "LONOPINQ",
        "CIFOPINQ",
        "GENOPINQ",
        "CASOPINQ",
        "PFMOPINQ",
        "VISOPINQ",
        "WBSOPINQ",
        "CTAOPINQ",
        "ELMOPINQ",
        "LIMOPINQ",
        "EXPOPINQ",
        "FN1OPINQ",
        "FXCOPINQ",
        "TDROPINQ",
        "SECOPINQ",
        "TERMINALQ",
        "SECMAINQ",
        "SY3000Q",
        "TXPOPINQ",
        "SWIFTINQ",
        "REPLAYQ",
        "REPLAY01Q",
        "REPLAY02Q",
        "REPLAY03Q",
        "TMMOPINQ",
        "TMMQ",
        "TBGOPINQ",
        "TBGQ",
        "PYNMAINQ",
        "SPYOPINQ",
        "PYIMAINQ",
        "PYMMAINQ",
        "PYOMAINQ",
        "PYLMAINQ",
        "GIRMAINQ",
        "OLROPINQ",

        /* Telepac queues */
        "TPAC1",
        "TPAC2",
        "TPAC3",
        "TPOST",
        "TPCQ",
        "TPCOPINQ",
        "MHSQ",

        /* Unknown */
        "ARD0001",
        "AIO0001",
        "ARD0002",
        "AIO0002",
        "AJNL",
        "DBDUM",
        "DYMON",
        "ENQRY",
        "HWCRP",
        "KMNGR",
        "MAINT",
        "NAMES",
        "START",
        "SUPER",
        "TLLR1",
        "SPARE!!!!",
        "CHQMDQ",
        "JSMCONSQ",
        "JSMGENERQ",
        "JSMNEXTQ",
        "JSMSTARTQ",
        "CRDEV0005",
        "NDUMP",
        "DIBLD",
        "DIBRD0002",
        "RPORT",
        "DXLNK",
        "DXL25W001",
        "DXL25W002",
        "RTLNK",
        "RETRY",
        "TEST",
        "DXL25W003",
        "DXL25W004",
        "RTL25W001",
        "RTL25W002",
        "SWIFT2Q",
        "MSETT",

        NULL
};

char *importantQueues[] =
{
        "CASQ",
        "CIFQ",
        "CTAQ",
        "DEPQ",
        "DP1Q",
        "DP2Q",
        "DP3Q",
        "DP4Q",
        "DP5Q",
        "DP6Q",
        "DP7Q",
        "DP8Q",
        "DP9Q",
        "GL1Q",
        "EQ1Q",
        "ELMQ",
        "GENQ",
        "LONQ",
        "OLRQ",
        "ONLQ",
        "PF1Q",
        "PFMQ",
        "RESPQ",
        "SBRQ",
        "SDVQ",
        "SPYQ",
        "VPIQ",
        "VV1Q",
        "VV2Q",
        "VV3Q",
        "ARCQ",
        "CC1Q",
        "KCCQ",
        "FA1Q",
        "SFDQ",
        "GLAQ",
        "CRCQ",
        "BLTQ",
        "VV3Q",
        "BL1Q",
        NULL
};

/* Start of Changes for multiplexed queues */
char **multiplexedQueues;
/* End of Changes for multiplexed queues */

int msgCount, msgQId, msgCBytes;
float ratioBytes;
long sendTimeDiff, recTimeDiff;

FILE *filePointer;
FILE *filefd;
char fileName[256];
char newFileName[256];
char *homePath;

/* === FIXED: write timestamp === */
static void write_timestamp_to_t11(void){
        const char *home = getenv("HOME");
        if (!home) return;
        char path[512];
        struct timeval tv;
        struct tm *tm_info;

        gettimeofday(&tv, NULL);
        tm_info = localtime(&tv.tv_sec);

        snprintf(path, sizeof(path), "%s/t11", home);
        FILE *fp = fopen(path, "w");
        if (!fp) return;

        fprintf(fp, "%02d:%02d:%02d.%03ld.%03ld\n",
                tm_info->tm_hour, tm_info->tm_min, tm_info->tm_sec,
                tv.tv_usec/1000, tv.tv_usec%1000);
        fclose(fp);
}

int getMultQueIndex(char queueName[],int multQueCount){
        int idx;

        for(idx=1; idx < multQueCount; idx++)
                if(!strcmp(queueName,multiplexedQueues[idx]))
                        break;
        if( idx == multQueCount)
                return 0;
        else
                return 1;
}

int getQueueIndex(char queueName[]){
        int idx;
        for (idx=0; queueTable[idx]!=NULL; idx++)
                if (!strcmp(queueName,queueTable[idx]))
                        break;

        if (queueTable[idx]==NULL)
                return -1;
        else
                return idx;
}

int getDQPType(){
        char *dqpPtr=getenv("BANCS_DQPTYPE");
        return (int)dqpPtr[0];   /* keep original functionality */
}

int getFNSSysnum(){
        char *fnsSysnumPtr=getenv("FNS_SYSNUM");
        return (int)(fnsSysnumPtr[0]-'0');  /* keep original functionality */
}

int getApplNo(){
        char *applNumPtr=getenv("BANCS_HOSTNO");
        return (int)(applNumPtr[0]-'0');   /* keep original functionality */
}

int loadQueueDetails(int queueKey){
        struct msqid_ds msgQueueID_DS;
        time_t curTime = time(NULL);
        msgQId=msgget(queueKey, 0);
        if (msgQId==-1)
                return -1;
        else{
                if(msgctl(msgQId, IPC_STAT, &msgQueueID_DS)==-1)
                        return -2;
                else{
                        msgCount=msgQueueID_DS.msg_qnum;
                        msgCBytes=msgQueueID_DS.msg_cbytes;
                        ratioBytes=(msgQueueID_DS.msg_qbytes > 0) ? (float)msgQueueID_DS.msg_cbytes/(float)msgQueueID_DS.msg_qbytes : 0.0;
                        sendTimeDiff=(long)(curTime - msgQueueID_DS.msg_stime);
                        recTimeDiff=(long)(curTime - msgQueueID_DS.msg_rtime);
                        return 0;
                }
        }
}

int main(int argc, char *argv[])
{
        int queueIdx, idx,idx1,flag,bancsDQPType, fnsSysnum, bancsHostno, queueKey, loadQueueRC;
        char DQPType;
        char dqpStr[2];  /* FIX for strcat bug */

        multiplexedQueues = argv;

        bancsDQPType=getDQPType();
        fnsSysnum=getFNSSysnum();
        bancsHostno=getApplNo();

        DQPType=(char)bancsDQPType;
        dqpStr[0] = DQPType;
        dqpStr[1] = '\0';

        homePath=getenv("HOME");
        if (homePath == NULL) {
            printf("Error: HOME environment variable not set.\n");
            exit(-1);
        }

        strcpy(fileName,homePath);
        strcat(fileName, "/queue_buildup_");
        strcat(fileName, dqpStr);        /* FIXED */
        strcat(fileName, ".out");

        strcpy(newFileName,homePath);
        strcat(newFileName, "/queue_buildup_");
        strcat(newFileName, dqpStr);     /* FIXED */
        strcat(newFileName, "_new.out");

        filePointer=fopen(fileName, "w+");
        if(filePointer==NULL){
                printf("\nError opening file: %s\n", fileName);
                exit(-1);
        }

        filefd=fopen(newFileName, "w+");
        if(filefd==NULL){
                printf("\nError opening file: %s\n", newFileName);
                exit(-1);
        }

        write_timestamp_to_t11();

        for (idx=0; importantQueues[idx]!=NULL; idx++){
                flag=0;
                queueIdx=getQueueIndex(importantQueues[idx]);
                if(queueIdx==-1){
                        fprintf(filePointer, "%s NSQE\n", importantQueues[idx]);
                        fprintf(filefd, "%s NSQE\n", importantQueues[idx]);
                }
                else{
                        queueKey=Q_OFFSET+queueIdx+NUM_QUEUES*(bancsHostno+NUM_APPS*(fnsSysnum+NUM_SYSTEMS*bancsDQPType));
                        loadQueueRC=loadQueueDetails(queueKey);
                        if(loadQueueRC==-1)
                        {
                                for (idx1=1;idx1 < argc; idx1++){
                                        if(!strcmp(importantQueues[idx],multiplexedQueues[idx1])){
                                                fprintf(filePointer, "%s B, NQKE\n",importantQueues[idx]);
                                                fprintf(filefd, "%s B, NQKE\n",importantQueues[idx]);
                                                flag=1;
                                        }}
                                if(flag==0)
                                {
                                        fprintf(filePointer, "%s\tNQKE\n", importantQueues[idx]);
                                        fprintf(filefd, "%s\tNQKE\n", importantQueues[idx]);
                                }
                        }
                        else if(loadQueueRC==-2){
                                fprintf(filePointer, "LDQE\n");
                                fprintf(filefd, "LDQE\n");
                        }
                        else{
                                fprintf(filePointer, "%s\t%d\n",importantQueues[idx],msgCount);
                                fprintf(filefd,"%s\t%d\t%d\t%.2f\t%010ld\t%010ld\n",importantQueues[idx],msgCount,msgCBytes,ratioBytes,sendTimeDiff,recTimeDiff);
                        }

                        if(getMultQueIndex(importantQueues[idx],argc)){
                                int offsets[] = {510,520,530};
                                char labels[] = {'A','I','M'};
                                for(int oi=0; oi<3; oi++){
                                        queueKey = Q_OFFSET+queueIdx+offsets[oi]+NUM_QUEUES*(bancsHostno+NUM_APPS*(fnsSysnum+NUM_SYSTEMS*bancsDQPType));
                                        loadQueueRC=loadQueueDetails(queueKey);
                                        if(loadQueueRC==-1){
                                                fprintf(filePointer, "%s %c, NQKE\n",importantQueues[idx],labels[oi]);
                                                fprintf(filefd, "%s %c, NQKE\n",importantQueues[idx],labels[oi]);
                                        }
                                        else if(loadQueueRC==-2){
                                                fprintf(filePointer, "%s %c, LDQE\n",importantQueues[idx],labels[oi]);
                                                fprintf(filefd, "%s %c, LDQE\n",importantQueues[idx],labels[oi]);
                                        }
                                        else{
                                                fprintf(filePointer, "%s %c, %d\n",importantQueues[idx],labels[oi],msgCount);
                                                fprintf(filefd,"%s %c, %d\t%d\t%.2f\t%010ld\t%010ld\n",importantQueues[idx],labels[oi],msgCount,msgCBytes,ratioBytes,sendTimeDiff,recTimeDiff);
                                        }
                                }
                        }
                }
        }

        fclose(filePointer);
        fclose(filefd);
        return 0;
}
