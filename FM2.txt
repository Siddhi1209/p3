// get_queue_buildup.c
// Writes queues vertically to $HOME/queue_buildup_<DQP>.out (unchanged format)
// Writes timestamp to $HOME/t11 as HH:MM:SS.mmm.uuu (milliseconds.microseconds)

#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
#include <sys/time.h>
#include <time.h>

#define Q_OFFSET        500
#define NUM_REGIONS     128
#define NUM_SYSTEMS     10
#define NUM_APPS        10
#define NUM_QUEUES      250
#define MAX_QUEUE_KEY   (Q_OFFSET + NUM_REGIONS * NUM_SYSTEMS * NUM_APPS * NUM_QUEUES)

char *queueTable[] =
{
     "BANCSQ",
        "LINKINQ",
        "LINKOUTQ",
        "SYSSTARTQ",
        "DJ0000Q",
        "SY0020Q",
        "SY0040Q",
        "SY0050Q",
        "SY0070Q",
        "CDRUTHERQ",
        "CDRDELAYQ",
        "CDTRACERQ",
        "SCCQ",
        "SCCOPINQ",

        /* A Interface queues */
        "AT0000Q",
        "AT0100Q",
        "AT0110Q",
        "AT0200Q",
        "AT0300Q",
        "AT0210Q",
        /*  Commented for multiple queues for A Gateway IR 18794*/
        /*START of IR R331 (Revert IR 18794)*/
        "EI0000Q",
        "EI0060Q",
        /*"EI0061Q",
        "EI0062Q",
        "EI0063Q",
        "EI0064Q",
        "EI0065Q",*/
        /*END of IR R331*/
        /* Five EI0060Q s added for A Gateway IR 18794*/
        "ATINQ",
        "ATOUTQ",
        "ATRDELAYQ",
        "ATRUTHERQ",
        "ATTRACERQ",
        "ACSQ",
        "ACTLQ",
        "INPUTQ",
        "TRICKLEQ",
        "INTERAPQ",
        "OPQ",
        "CONSOLEQ",
        "SY0004Q",
        "DEPQ",
        "LONQ",
        "TXPQ",
        "CIFQ",
        "GENQ",
        "CASQ",
        "PFMQ",
        "VPIQ",
        "SDVQ",
        "VISQ",
        "WBSQ",
        "CTAQ",
        "SBRQ",
        "ELMQ",
        "LIMQ",
        "EXPQ",
        "FN1Q",
        "FXCQ",
        "TDRQ",
        "SECQ",
        "EPSQ",
        "SPYQ",
        "OLRQ",
        "ONLQ",
        "RESPQ",
        "SB0100Q",
        "DP1Q",
        "DP2Q",
        "DP3Q",
        "DP4Q",
        "DP5Q",
        "DP6Q",
        "DP7Q",
        "DP8Q",
        "DP9Q",
        "VV1Q",
        "VV2Q",
        "VV3Q",
        "ARCQ",
        "CC1Q",
        "KCCQ",
        "LN1Q",
        "PF1Q",
        "GL1Q",
        "EQ1Q",
        "FA1Q",
        "NW1Q",
        "NW2Q",
        "NW3Q",
        "SFDQ",
        "CRCQ",
        "BLTQ",
        "BL1Q",
        "DEPOPINQ",
        "LONOPINQ",
        "CIFOPINQ",
        "GENOPINQ",
        "CASOPINQ",
        "PFMOPINQ",
        "VISOPINQ",
        "WBSOPINQ",
        "CTAOPINQ",
        "ELMOPINQ",
        "LIMOPINQ",
        "EXPOPINQ",
        "FN1OPINQ",
        "FXCOPINQ",
        "TDROPINQ",
        "SECOPINQ",
        "TERMINALQ",
        "SECMAINQ",
        "SY3000Q",
        "TXPOPINQ",
        "SWIFTINQ",
        "REPLAYQ",
        "REPLAY01Q",
        "REPLAY02Q",
        "REPLAY03Q",
        "TMMOPINQ",
        "TMMQ",
        "TBGOPINQ",
        "TBGQ",
        "PYNMAINQ",
        "SPYOPINQ",
        "PYIMAINQ",
        "PYMMAINQ",
        "PYOMAINQ",
        "PYLMAINQ",
        "GIRMAINQ",
        "OLROPINQ",

        /* Telepac queues */
        "TPAC1",    /* Telepac Test Queues */
        "TPAC2",
        "TPAC3",
        "TPOST",    /* Transaction Poster */
        "TPCQ",     /* TPINTER */
        "TPCOPINQ", /* TPINTER */
        /* New Intersystem -interface to BOSS- Queue */
        "MHSQ",

        /* Unknown */
        "ARD0001",
        "AIO0001",
        "ARD0002",
        "AIO0002",
        "AJNL",
        "DBDUM",
        "DYMON",
        "ENQRY",
        "HWCRP",
        "KMNGR",
        "MAINT",
        "NAMES",
        "START",
        "SUPER",
        "TLLR1",
        "SPARE!!!!",
        "CHQMDQ",
        "JSMCONSQ",
        "JSMGENERQ",
        "JSMNEXTQ",
        "JSMSTARTQ",
        "CRDEV0005",
        "NDUMP",
        "DIBLD",
        "DIBRD0002",
        "RPORT",
        "DXLNK",
        "DXL25W001",
        "DXL25W002",
        "RTLNK",
        "RETRY",
        "TEST",
        "DXL25W003",
        "DXL25W004",
        "RTL25W001",
        "RTL25W002",
        "SWIFT2Q",
        "MSETT",

        /* Terminator */
        NULL
};

char *importantQueues[] =
{
    "CASQ",
        "CIFQ",
        "CTAQ",
        "DEPQ",
        "DP1Q",
        "DP2Q",
        "DP3Q",
        "DP4Q",
        "DP5Q",
        "DP6Q",
        "DP7Q",
        "DP8Q",
        "DP9Q",
        "GL1Q",
        "EQ1Q",
        "ELMQ",
        "GENQ",
        "LONQ",
        "OLRQ",
        "ONLQ",
        "PF1Q",
        "PFMQ",
        "RESPQ",
        "SBRQ",
        "SDVQ",
        "SPYQ",
        "VPIQ",
        "VV1Q",
        "VV2Q",
        "VV3Q",
        "ARCQ",
        "CC1Q",
        "KCCQ",
        "FA1Q",
        "SFDQ",
        "CRCQ",
        "BLTQ",
        "BL1Q",


        /* Terminator */
        NULL
};

/* multiplexed queues (argv-driven) */
char **multiplexedQueues;

int msgCount, msgQId;

/* --- helper: index lookups --- */
int getQueueIndex(char queueName[]){
    int idx;
    for (idx=0; queueTable[idx]!=NULL; idx++)
        if (!strcmp(queueName,queueTable[idx])) return idx;
    return -1;
}

int getMultQueIndex(char queueName[],int multQueCount){
    int idx;
    for(idx=1; idx < multQueCount; idx++)
        if(!strcmp(queueName,multiplexedQueues[idx])) return 1;
    return 0;
}

/* --- env helpers --- */
int getDQPType(){           return (int)getenv("BANCS_DQPTYPE")[0]; }
int getFNSSysnum(){         return (int)(getenv("FNS_SYSNUM")[0]-'0'); }
int getApplNo(){            return (int)(getenv("BANCS_HOSTNO")[0]-'0'); }

/* --- sysv msg helpers --- */
int loadQueueDetails(int queueKey){
    struct msqid_ds ds;
    msgQId=msgget(queueKey, 0);
    if (msgQId==-1) return -1;
    if (msgctl(msgQId, IPC_STAT, &ds)==-1) return -2;
    msgCount=ds.msg_qnum;
    return 0;
}

/* --- NEW: write time to $HOME/t11 as HH:MM:SS.mmm.uuu --- */
static void write_timestamp_to_t11(void){
    struct timeval tv;
    struct tm *tm_info;
    char path[512];

    const char *home = getenv("HOME");
    if (!home) return;

    gettimeofday(&tv, NULL);
    tm_info = localtime(&tv.tv_sec);

    snprintf(path, sizeof(path), "%s/t11", home);
    FILE *fp = fopen(path, "w");
    if (!fp) return;

    /* milliseconds and microseconds separated by a dot */
    fprintf(fp, "%02d:%02d:%02d.%03ld.%03ld\n",
            tm_info->tm_hour, tm_info->tm_min, tm_info->tm_sec,
            tv.tv_usec/1000, tv.tv_usec%1000);
    fclose(fp);
}

int main(int argc, char *argv[])
{
    int queueIdx, idx, idx1, flag, bancsDQPType, fnsSysnum, bancsHostno, queueKey, rc;
    char DQPType;
    char outPath[512];

    multiplexedQueues = argv;

    bancsDQPType=getDQPType();
    fnsSysnum   =getFNSSysnum();
    bancsHostno =getApplNo();
    DQPType=(char)bancsDQPType;

    /* Build $HOME/queue_buildup_<DQP>.out */
    snprintf(outPath, sizeof(outPath), "%s/queue_buildup_%c.out", getenv("HOME"), DQPType);
    FILE *filePointer=fopen(outPath, "w+");
    if(filePointer==NULL){
        printf("\nError opening file: %s", outPath);
        exit(-1);
    }

    /* Write timestamp to $HOME/t11 (NOT into .out) */
    write_timestamp_to_t11();

    /* Main loop: queues printed vertically exactly like original */
    for (idx=0; importantQueues[idx]!=NULL; idx++){
        flag=0;
        queueIdx=getQueueIndex(importantQueues[idx]);

        if(queueIdx==-1){
            fprintf(filePointer, "%s NSQE\n", importantQueues[idx]);
            continue;
        }

        queueKey=Q_OFFSET+queueIdx+NUM_QUEUES*(bancsHostno+NUM_APPS*(fnsSysnum+NUM_SYSTEMS*bancsDQPType));
        rc=loadQueueDetails(queueKey);
        if(rc==-1){
            /* check multiplexed presence list from argv */
            for (idx1=1; idx1 < argc; idx1++){
                if(!strcmp(importantQueues[idx],multiplexedQueues[idx1])){
                    fprintf(filePointer, "%s B, NQKE\n", importantQueues[idx]);
                    flag=1;
                }
            }
            if(flag==0) fprintf(filePointer, "%s\tNQKE\n", importantQueues[idx]);
        } else if(rc==-2){
            fprintf(filePointer, "LDQE\n");
        } else {
            fprintf(filePointer, "%s\t%d\n", importantQueues[idx], msgCount);
        }

        /* A / I / M multiplexed queues */
        if(getMultQueIndex(importantQueues[idx],argc)){
            /* A */
            queueKey = Q_OFFSET+queueIdx+510+NUM_QUEUES*(bancsHostno+NUM_APPS*(fnsSysnum+NUM_SYSTEMS*bancsDQPType));
            rc=loadQueueDetails(queueKey);
            if(rc==-1) fprintf(filePointer, "%s A, NQKE\n",importantQueues[idx]);
            else if(rc==-2) fprintf(filePointer, "%s A, LDQE\n",importantQueues[idx]);
            else fprintf(filePointer, "%s A, %d\n",importantQueues[idx], msgCount);

            /* I */
            queueKey = Q_OFFSET+queueIdx+520+NUM_QUEUES*(bancsHostno+NUM_APPS*(fnsSysnum+NUM_SYSTEMS*bancsDQPType));
            rc=loadQueueDetails(queueKey);
            if(rc==-1) fprintf(filePointer, "%s I, NQKE\n",importantQueues[idx]);
            else if(rc==-2) fprintf(filePointer, "%s I, LDQE\n",importantQueues[idx]);
            else fprintf(filePointer, "%s I, %d\n", importantQueues[idx], msgCount);

            /* M */
            queueKey = Q_OFFSET+queueIdx+530+NUM_QUEUES*(bancsHostno+NUM_APPS*(fnsSysnum+NUM_SYSTEMS*bancsDQPType));
            rc=loadQueueDetails(queueKey);
            if(rc==-1) fprintf(filePointer, "%s M, NQKE\n",importantQueues[idx]);
            else if(rc==-2) fprintf(filePointer, "%s M, LDQE\n",importantQueues[idx]);
            else fprintf(filePointer, "%s M, %d\n", importantQueues[idx], msgCount);
        }
    }

    fclose(filePointer);
    return 0;
}
