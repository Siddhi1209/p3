
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
#include <sys/time.h>
#include <time.h>

#define Q_OFFSET                500
#define NUM_REGIONS             128
#define NUM_SYSTEMS             10
#define NUM_APPS                10
#define NUM_QUEUES              250
#define MAX_QUEUE_KEY           (Q_OFFSET+NUM_REGIONS*NUM_SYSTEMS*NUM_APPS*NUM_QUEUES)

char *queueTable[] =
{
    /* your original queueTable list exactly as before */
    /* Terminator */
    NULL
};

char *importantQueues[] =
{
    /* your original importantQueues list exactly as before */
    /* Terminator */
    NULL
};

/* Start of Changes for multiplexed queues */
char **multiplexedQueues;
/* End of Changes for multiplexed queues */

int msgCount, msgQId;
FILE *filePointer;
char *fileName;

int getMultQueIndex(char queueName[], int multQueCount) {
    int idx;
    for (idx = 1; idx < multQueCount; idx++)
        if (!strcmp(queueName, multiplexedQueues[idx]))
            break;
    return (idx == multQueCount) ? 0 : 1;
}

int getQueueIndex(char queueName[]) {
    int idx;
    for (idx = 0; queueTable[idx] != NULL; idx++)
        if (!strcmp(queueName, queueTable[idx]))
            break;
    return (queueTable[idx] == NULL) ? -1 : idx;
}

int getDQPType() {
    char *dqpPtr = getenv("BANCS_DQPTYPE");
    return (int)dqpPtr[0];
}

int getFNSSysnum() {
    char *fnsSysnumPtr = getenv("FNS_SYSNUM");
    return (int)(fnsSysnumPtr[0] - '0');
}

int getApplNo() {
    char *applNumPtr = getenv("BANCS_HOSTNO");
    return (int)(applNumPtr[0] - '0');
}

int loadQueueDetails(int queueKey) {
    struct msqid_ds msgQueueID_DS;
    msgQId = msgget(queueKey, 0);
    if (msgQId == -1)
        return -1;
    else {
        if (msgctl(msgQId, IPC_STAT, &msgQueueID_DS) == -1)
            return -2;
        else {
            msgCount = msgQueueID_DS.msg_qnum;
            return 0;
        }
    }
}

void getTimestampWithMicro(char *buffer, size_t bufSize) {
    struct timeval tv;
    struct tm *tm_info;
    gettimeofday(&tv, NULL);
    tm_info = localtime(&tv.tv_sec);

    int milli = tv.tv_usec / 1000;
    int micro = tv.tv_usec % 1000;

    strftime(buffer, bufSize, "%H:%M:%S", tm_info);
    char temp[20];
    snprintf(temp, sizeof(temp), ".%03d.%03d", milli, micro);
    strncat(buffer, temp, bufSize - strlen(buffer) - 1);
}

int main(int argc, char *argv[]) {
    int queueIdx, idx, idx1, flag, bancsDQPType, fnsSysnum, bancsHostno, queueKey, loadQueueRC;
    char DQPType, timestamp[30];

    multiplexedQueues = argv;

    bancsDQPType = getDQPType();
    fnsSysnum = getFNSSysnum();
    bancsHostno = getApplNo();
    DQPType = (char)bancsDQPType;

    fileName = getenv("HOME");
    strcat(fileName, "/queue_buildup_");
    strcat(fileName, &DQPType);
    strcat(fileName, ".out");

    filePointer = fopen(fileName, "w+");
    if (filePointer == NULL) {
        printf("\nError opening file: %s", fileName);
        exit(-1);
    }

    getTimestampWithMicro(timestamp, sizeof(timestamp));
    fprintf(filePointer, "%s\n", timestamp); // timestamp at top

    for (idx = 0; importantQueues[idx] != NULL; idx++) {
        flag = 0;
        queueIdx = getQueueIndex(importantQueues[idx]);

        if (queueIdx == -1)
            fprintf(filePointer, "%s NSQE\n", importantQueues[idx]);
        else {
            queueKey = Q_OFFSET + queueIdx + NUM_QUEUES * (bancsHostno + NUM_APPS * (fnsSysnum + NUM_SYSTEMS * bancsDQPType));
            loadQueueRC = loadQueueDetails(queueKey);

            if (loadQueueRC == -1) {
                for (idx1 = 1; idx1 < argc; idx1++) {
                    if (!strcmp(importantQueues[idx], multiplexedQueues[idx1])) {
                        fprintf(filePointer, "%s B, NQKE\n", importantQueues[idx]);
                        flag = 1;
                    }
                }
                if (flag == 0)
                    fprintf(filePointer, "%s\tNQKE\n", importantQueues[idx]);
            } else if (loadQueueRC == -2)
                fprintf(filePointer, "LDQE\n");
            else
                fprintf(filePointer, "%s\t%d\n", importantQueues[idx], msgCount);

            if (getMultQueIndex(importantQueues[idx], argc)) {
                queueKey = Q_OFFSET + queueIdx + 510 + NUM_QUEUES * (bancsHostno + NUM_APPS * (fnsSysnum + NUM_SYSTEMS * bancsDQPType));
                loadQueueRC = loadQueueDetails(queueKey);
                if (loadQueueRC == -1)
                    fprintf(filePointer, "%s A, NQKE\n", importantQueues[idx]);
                else if (loadQueueRC == -2)
                    fprintf(filePointer, "%s A, LDQE\n", importantQueues[idx]);
                else
                    fprintf(filePointer, "%s A, %d\n", importantQueues[idx], msgCount);

                queueKey = Q_OFFSET + queueIdx + 520 + NUM_QUEUES * (bancsHostno + NUM_APPS * (fnsSysnum + NUM_SYSTEMS * bancsDQPType));
                loadQueueRC = loadQueueDetails(queueKey);
                if (loadQueueRC == -1)
                    fprintf(filePointer, "%s I, NQKE\n", importantQueues[idx]);
                else if (loadQueueRC == -2)
                    fprintf(filePointer, "%s I, LDQE\n", importantQueues[idx]);
                else
                    fprintf(filePointer, "%s I, %d\n", importantQueues[idx], msgCount);

                queueKey = Q_OFFSET + queueIdx + 530 + NUM_QUEUES * (bancsHostno + NUM_APPS * (fnsSysnum + NUM_SYSTEMS * bancsDQPType));
                loadQueueRC = loadQueueDetails(queueKey);
                if (loadQueueRC == -1)
                    fprintf(filePointer, "%s M, NQKE\n", importantQueues[idx]);
                else if (loadQueueRC == -2)
                    fprintf(filePointer, "%s M, LDQE\n", importantQueues[idx]);
                else
                    fprintf(filePointer, "%s M, %d\n", importantQueues[idx], msgCount);
            }
        }
    }

    fclose(filePointer);
    return 0;
}
